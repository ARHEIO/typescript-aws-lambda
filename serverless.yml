service: bookreviewer

frameworkVersion: ">=1.1.0 <2.0.0"

package:
  individually: true
  exclude:
    - ./**/*

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage,'dev'}
  region: ap-southeast-2
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

custom:
  stages:
    - dev
    - staging
    - prod

functions:
  deleteList:
    handler: dist/deleteList.handler
    package:
      include:
        - dist/deleteList.js
    events:
      - http:
          path: bookreviewer/list/{id}
          method: delete
          cors: true
  getBooks:
    handler: dist/getBooks.handler
    package:
      include:
        - dist/getBooks.js
    events:
      - http:
          path: bookreviewer/books
          method: get
          cors: true
  getList:
    handler: dist/getList.handler
    package:
      include:
        - dist/getList.js
    events:
      - http:
          path: bookreviewer/list
          method: get
          cors: true
  patchList:
    handler: dist/patchList.handler
    package:
      include:
        - dist/patchList.js
    events:
      - http:
          path: bookreviewer/list
          method: patch
          cors: true

resources:
  Resources:
    BookReviewerDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}